// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "toggle.h"

// Dispatch interfaces referenced by this interface
#include "picture.h"
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CToggle

IMPLEMENT_DYNCREATE(CToggle, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CToggle properties

long CToggle::GetBevelInner()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetBevelInner(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CToggle::GetBevelOuter()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetBevelOuter(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CToggle::GetBevelWidth()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetBevelWidth(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

long CToggle::GetBlinkMode()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetBlinkMode(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

short CToggle::GetBlinkRate()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetBlinkRate(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

short CToggle::GetBorderWidth()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetBorderWidth(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

BOOL CToggle::GetMouseControl()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetMouseControl(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

unsigned long CToggle::GetOffBackColor()
{
	unsigned long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetOffBackColor(unsigned long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

CString CToggle::GetOffCaption()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CToggle::SetOffCaption(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

unsigned long CToggle::GetOffForeColor()
{
	unsigned long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetOffForeColor(unsigned long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

CString CToggle::GetOffWave()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CToggle::SetOffWave(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

short CToggle::GetOffX()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetOffX(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

unsigned long CToggle::GetOnBackColor()
{
	unsigned long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetOnBackColor(unsigned long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

CString CToggle::GetOnCaption()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CToggle::SetOnCaption(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

unsigned long CToggle::GetOnForeColor()
{
	unsigned long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetOnForeColor(unsigned long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

short CToggle::GetOnTimer()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetOnTimer(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

CString CToggle::GetOnWave()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CToggle::SetOnWave(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

short CToggle::GetOnX()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetOnX(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

short CToggle::GetOnY()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetOnY(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

BOOL CToggle::GetOutline()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetOutline(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

unsigned long CToggle::GetOutlineColor()
{
	unsigned long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetOutlineColor(unsigned long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

short CToggle::GetPushX()
{
	short result;
	GetProperty(0x16, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetPushX(short propVal)
{
	SetProperty(0x16, VT_I2, propVal);
}

short CToggle::GetPushY()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetPushY(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

BOOL CToggle::GetSound()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetSound(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

BOOL CToggle::GetValue()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetValue(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

BOOL CToggle::Get_Value()
{
	BOOL result;
	GetProperty(0x0, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::Set_Value(BOOL propVal)
{
	SetProperty(0x0, VT_BOOL, propVal);
}

long CToggle::GetMode()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetMode(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

CPicture CToggle::GetOffPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1b, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CToggle::SetOffPicture(LPDISPATCH propVal)
{
	SetProperty(0x1b, VT_DISPATCH, propVal);
}

CPicture CToggle::GetOnPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1c, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CToggle::SetOnPicture(LPDISPATCH propVal)
{
	SetProperty(0x1c, VT_DISPATCH, propVal);
}

CPicture CToggle::GetPushPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1d, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CToggle::SetPushPicture(LPDISPATCH propVal)
{
	SetProperty(0x1d, VT_DISPATCH, propVal);
}

short CToggle::GetOffY()
{
	short result;
	GetProperty(0x1e, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetOffY(short propVal)
{
	SetProperty(0x1e, VT_I2, propVal);
}

COleFont CToggle::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CToggle::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CToggle::GetFontBold()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetFontBold(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

BOOL CToggle::GetFontItalic()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetFontItalic(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}

CString CToggle::GetFontName()
{
	CString result;
	GetProperty(0x21, VT_BSTR, (void*)&result);
	return result;
}

void CToggle::SetFontName(LPCTSTR propVal)
{
	SetProperty(0x21, VT_BSTR, propVal);
}

float CToggle::GetFontSize()
{
	float result;
	GetProperty(0x22, VT_R4, (void*)&result);
	return result;
}

void CToggle::SetFontSize(float propVal)
{
	SetProperty(0x22, VT_R4, propVal);
}

BOOL CToggle::GetFontStrikethru()
{
	BOOL result;
	GetProperty(0x23, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetFontStrikethru(BOOL propVal)
{
	SetProperty(0x23, VT_BOOL, propVal);
}

BOOL CToggle::GetFontUnderline()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetFontUnderline(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

BOOL CToggle::GetSingleBuffer()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetSingleBuffer(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

BOOL CToggle::GetFocusOutline()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetFocusOutline(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

OLE_HANDLE CToggle::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

OLE_COLOR CToggle::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

CString CToggle::GetConfiguration()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}

void CToggle::SetConfiguration(LPCTSTR propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}

BOOL CToggle::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CToggle::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

CString CToggle::GetOutlineTitle()
{
	CString result;
	GetProperty(0x48, VT_BSTR, (void*)&result);
	return result;
}

void CToggle::SetOutlineTitle(LPCTSTR propVal)
{
	SetProperty(0x48, VT_BSTR, propVal);
}

short CToggle::GetOutlineWidth()
{
	short result;
	GetProperty(0x49, VT_I2, (void*)&result);
	return result;
}

void CToggle::SetOutlineWidth(short propVal)
{
	SetProperty(0x49, VT_I2, propVal);
}

long CToggle::GetOutlineAlign()
{
	long result;
	GetProperty(0x4a, VT_I4, (void*)&result);
	return result;
}

void CToggle::SetOutlineAlign(long propVal)
{
	SetProperty(0x4a, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CToggle operations

void CToggle::ShowPropertyPage()
{
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CToggle::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
