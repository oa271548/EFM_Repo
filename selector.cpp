// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "selector.h"

// Dispatch interfaces referenced by this interface
#include "picture.h"
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CSelector

IMPLEMENT_DYNCREATE(CSelector, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSelector properties

CPicture CSelector::GetBackPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSelector::SetBackPicture(LPDISPATCH propVal)
{
	SetProperty(0x1, VT_DISPATCH, propVal);
}

CString CSelector::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

unsigned long CSelector::GetCaptionColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetCaptionColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CSelector::GetCaptionFontID()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetCaptionFontID(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CSelector::GetCaptions()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetCaptions(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

double CSelector::GetCaptionX()
{
	double result;
	GetProperty(0x5, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetCaptionX(double propVal)
{
	SetProperty(0x5, VT_R8, propVal);
}

double CSelector::GetCaptionY()
{
	double result;
	GetProperty(0x6, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetCaptionY(double propVal)
{
	SetProperty(0x6, VT_R8, propVal);
}

BOOL CSelector::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

COleFont CSelector::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CSelector::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

short CSelector::GetFonts()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetFonts(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

unsigned long CSelector::GetKnobColor()
{
	unsigned long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetKnobColor(unsigned long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

double CSelector::GetKnobOriginX()
{
	double result;
	GetProperty(0x9, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetKnobOriginX(double propVal)
{
	SetProperty(0x9, VT_R8, propVal);
}

double CSelector::GetKnobOriginY()
{
	double result;
	GetProperty(0xa, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetKnobOriginY(double propVal)
{
	SetProperty(0xa, VT_R8, propVal);
}

double CSelector::GetKnobRadius()
{
	double result;
	GetProperty(0xb, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetKnobRadius(double propVal)
{
	SetProperty(0xb, VT_R8, propVal);
}

long CSelector::GetKnobStyle()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetKnobStyle(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

CString CSelector::GetKnobUserDefined()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetKnobUserDefined(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

unsigned long CSelector::GetMarkColor()
{
	unsigned long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetMarkColor(unsigned long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

double CSelector::GetMarkInnerRadius()
{
	double result;
	GetProperty(0xf, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetMarkInnerRadius(double propVal)
{
	SetProperty(0xf, VT_R8, propVal);
}

double CSelector::GetMarkOuterRadius()
{
	double result;
	GetProperty(0x10, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetMarkOuterRadius(double propVal)
{
	SetProperty(0x10, VT_R8, propVal);
}

long CSelector::GetMarkStyle()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetMarkStyle(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

CString CSelector::GetMarkUserDefined()
{
	CString result;
	GetProperty(0x12, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetMarkUserDefined(LPCTSTR propVal)
{
	SetProperty(0x12, VT_BSTR, propVal);
}

double CSelector::GetMarkWidth()
{
	double result;
	GetProperty(0x13, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetMarkWidth(double propVal)
{
	SetProperty(0x13, VT_R8, propVal);
}

long CSelector::GetSelectionAlign()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetSelectionAlign(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

double CSelector::GetSelectionAngle()
{
	double result;
	GetProperty(0x15, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetSelectionAngle(double propVal)
{
	SetProperty(0x15, VT_R8, propVal);
}

CString CSelector::GetSelectionCaption()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetSelectionCaption(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

unsigned long CSelector::GetSelectionColor()
{
	unsigned long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetSelectionColor(unsigned long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

short CSelector::GetSelectionFontID()
{
	short result;
	GetProperty(0x18, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetSelectionFontID(short propVal)
{
	SetProperty(0x18, VT_I2, propVal);
}

double CSelector::GetSelectionOffsetX()
{
	double result;
	GetProperty(0x19, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetSelectionOffsetX(double propVal)
{
	SetProperty(0x19, VT_R8, propVal);
}

double CSelector::GetSelectionOffsetY()
{
	double result;
	GetProperty(0x1a, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetSelectionOffsetY(double propVal)
{
	SetProperty(0x1a, VT_R8, propVal);
}

double CSelector::GetSelectionRadius()
{
	double result;
	GetProperty(0x1b, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetSelectionRadius(double propVal)
{
	SetProperty(0x1b, VT_R8, propVal);
}

short CSelector::GetSelections()
{
	short result;
	GetProperty(0x1c, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetSelections(short propVal)
{
	SetProperty(0x1c, VT_I2, propVal);
}

short CSelector::GetValue()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetValue(short propVal)
{
	SetProperty(0x1d, VT_I2, propVal);
}

short CSelector::Get_Value()
{
	short result;
	GetProperty(0x0, VT_I2, (void*)&result);
	return result;
}

void CSelector::Set_Value(short propVal)
{
	SetProperty(0x0, VT_I2, propVal);
}

CPicture CSelector::GetKnobPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1e, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSelector::SetKnobPicture(LPDISPATCH propVal)
{
	SetProperty(0x1e, VT_DISPATCH, propVal);
}

long CSelector::GetBevelInner()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetBevelInner(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

long CSelector::GetBevelOuter()
{
	long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetBevelOuter(long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

short CSelector::GetBevelWidth()
{
	short result;
	GetProperty(0x21, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetBevelWidth(short propVal)
{
	SetProperty(0x21, VT_I2, propVal);
}

short CSelector::GetBorderWidth()
{
	short result;
	GetProperty(0x22, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetBorderWidth(short propVal)
{
	SetProperty(0x22, VT_I2, propVal);
}

double CSelector::GetFrameBottom()
{
	double result;
	GetProperty(0x23, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetFrameBottom(double propVal)
{
	SetProperty(0x23, VT_R8, propVal);
}

unsigned long CSelector::GetFrameColor()
{
	unsigned long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetFrameColor(unsigned long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

double CSelector::GetFrameLeft()
{
	double result;
	GetProperty(0x25, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetFrameLeft(double propVal)
{
	SetProperty(0x25, VT_R8, propVal);
}

CPicture CSelector::GetFramePicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x26, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSelector::SetFramePicture(LPDISPATCH propVal)
{
	SetProperty(0x26, VT_DISPATCH, propVal);
}

CString CSelector::GetFrameShape()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetFrameShape(LPCTSTR propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}

long CSelector::GetFrameStyle()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetFrameStyle(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

double CSelector::GetFrameTop()
{
	double result;
	GetProperty(0x29, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetFrameTop(double propVal)
{
	SetProperty(0x29, VT_R8, propVal);
}

BOOL CSelector::GetOutline()
{
	BOOL result;
	GetProperty(0x2a, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetOutline(BOOL propVal)
{
	SetProperty(0x2a, VT_BOOL, propVal);
}

long CSelector::GetOutlineAlign()
{
	long result;
	GetProperty(0x2b, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetOutlineAlign(long propVal)
{
	SetProperty(0x2b, VT_I4, propVal);
}

unsigned long CSelector::GetOutlineColor()
{
	unsigned long result;
	GetProperty(0x2c, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetOutlineColor(unsigned long propVal)
{
	SetProperty(0x2c, VT_I4, propVal);
}

CString CSelector::GetOutlineTitle()
{
	CString result;
	GetProperty(0x2d, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetOutlineTitle(LPCTSTR propVal)
{
	SetProperty(0x2d, VT_BSTR, propVal);
}

short CSelector::GetOutlineWidth()
{
	short result;
	GetProperty(0x2e, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetOutlineWidth(short propVal)
{
	SetProperty(0x2e, VT_I2, propVal);
}

double CSelector::GetFrameRight()
{
	double result;
	GetProperty(0x2f, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetFrameRight(double propVal)
{
	SetProperty(0x2f, VT_R8, propVal);
}

double CSelector::GetAutoOffsetDistance()
{
	double result;
	GetProperty(0x30, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetAutoOffsetDistance(double propVal)
{
	SetProperty(0x30, VT_R8, propVal);
}

long CSelector::GetAutoOffsetStyle()
{
	long result;
	GetProperty(0x31, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetAutoOffsetStyle(long propVal)
{
	SetProperty(0x31, VT_I4, propVal);
}

double CSelector::GetAutoRadius()
{
	double result;
	GetProperty(0x32, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetAutoRadius(double propVal)
{
	SetProperty(0x32, VT_R8, propVal);
}

double CSelector::GetAutoStartAngle()
{
	double result;
	GetProperty(0x33, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetAutoStartAngle(double propVal)
{
	SetProperty(0x33, VT_R8, propVal);
}

double CSelector::GetAutoStopAngle()
{
	double result;
	GetProperty(0x34, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetAutoStopAngle(double propVal)
{
	SetProperty(0x34, VT_R8, propVal);
}

OLE_COLOR CSelector::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CSelector::GetCaptionID()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetCaptionID(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}

short CSelector::GetFontID()
{
	short result;
	GetProperty(0x36, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetFontID(short propVal)
{
	SetProperty(0x36, VT_I2, propVal);
}

unsigned long CSelector::GetHighlightColor()
{
	unsigned long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetHighlightColor(unsigned long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

BOOL CSelector::GetLineDisplay()
{
	BOOL result;
	GetProperty(0x38, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetLineDisplay(BOOL propVal)
{
	SetProperty(0x38, VT_BOOL, propVal);
}

double CSelector::GetLineInnerRadius()
{
	double result;
	GetProperty(0x39, VT_R8, (void*)&result);
	return result;
}

void CSelector::SetLineInnerRadius(double propVal)
{
	SetProperty(0x39, VT_R8, propVal);
}

short CSelector::GetLineThickness()
{
	short result;
	GetProperty(0x3a, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetLineThickness(short propVal)
{
	SetProperty(0x3a, VT_I2, propVal);
}

short CSelector::GetSelectionID()
{
	short result;
	GetProperty(0x3b, VT_I2, (void*)&result);
	return result;
}

void CSelector::SetSelectionID(short propVal)
{
	SetProperty(0x3b, VT_I2, propVal);
}

BOOL CSelector::GetAutoAlign()
{
	BOOL result;
	GetProperty(0x3c, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetAutoAlign(BOOL propVal)
{
	SetProperty(0x3c, VT_BOOL, propVal);
}

BOOL CSelector::GetAutoAngle()
{
	BOOL result;
	GetProperty(0x3d, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetAutoAngle(BOOL propVal)
{
	SetProperty(0x3d, VT_BOOL, propVal);
}

BOOL CSelector::GetAutoAngleConfine()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetAutoAngleConfine(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

BOOL CSelector::GetAutoOffset()
{
	BOOL result;
	GetProperty(0x3f, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetAutoOffset(BOOL propVal)
{
	SetProperty(0x3f, VT_BOOL, propVal);
}

BOOL CSelector::GetHighlight()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetHighlight(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}

CPicture CSelector::GetMarkPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x41, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSelector::SetMarkPicture(LPDISPATCH propVal)
{
	SetProperty(0x41, VT_DISPATCH, propVal);
}

long CSelector::GetCaptionFlag()
{
	long result;
	GetProperty(0x42, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetCaptionFlag(long propVal)
{
	SetProperty(0x42, VT_I4, propVal);
}

CString CSelector::GetFontName()
{
	CString result;
	GetProperty(0x43, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetFontName(LPCTSTR propVal)
{
	SetProperty(0x43, VT_BSTR, propVal);
}

float CSelector::GetFontSize()
{
	float result;
	GetProperty(0x44, VT_R4, (void*)&result);
	return result;
}

void CSelector::SetFontSize(float propVal)
{
	SetProperty(0x44, VT_R4, propVal);
}

BOOL CSelector::GetFontBold()
{
	BOOL result;
	GetProperty(0x45, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetFontBold(BOOL propVal)
{
	SetProperty(0x45, VT_BOOL, propVal);
}

BOOL CSelector::GetFontItalic()
{
	BOOL result;
	GetProperty(0x46, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetFontItalic(BOOL propVal)
{
	SetProperty(0x46, VT_BOOL, propVal);
}

BOOL CSelector::GetFontUnderline()
{
	BOOL result;
	GetProperty(0x47, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetFontUnderline(BOOL propVal)
{
	SetProperty(0x47, VT_BOOL, propVal);
}

BOOL CSelector::GetFontStrikethru()
{
	BOOL result;
	GetProperty(0x48, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetFontStrikethru(BOOL propVal)
{
	SetProperty(0x48, VT_BOOL, propVal);
}

long CSelector::GetMouseControl()
{
	long result;
	GetProperty(0x49, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetMouseControl(long propVal)
{
	SetProperty(0x49, VT_I4, propVal);
}

BOOL CSelector::GetSingleBuffer()
{
	BOOL result;
	GetProperty(0x4a, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetSingleBuffer(BOOL propVal)
{
	SetProperty(0x4a, VT_BOOL, propVal);
}

BOOL CSelector::GetFocusOutline()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CSelector::SetFocusOutline(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

OLE_HANDLE CSelector::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CSelector::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

CString CSelector::GetConfiguration()
{
	CString result;
	GetProperty(0x4c, VT_BSTR, (void*)&result);
	return result;
}

void CSelector::SetConfiguration(LPCTSTR propVal)
{
	SetProperty(0x4c, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSelector operations

void CSelector::ShowPropertyPage()
{
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CSelector::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
