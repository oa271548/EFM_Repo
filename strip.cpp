// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "strip.h"

// Dispatch interfaces referenced by this interface
#include "Picture.h"
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CStrip

IMPLEMENT_DYNCREATE(CStrip, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CStrip properties

long CStrip::GetBevelInner()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetBevelInner(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CStrip::GetBevelOuter()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetBevelOuter(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CStrip::GetBevelWidth()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetBevelWidth(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CStrip::GetBorderWidth()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetBorderWidth(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

double CStrip::GetAreaBottom()
{
	double result;
	GetProperty(0x5, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetAreaBottom(double propVal)
{
	SetProperty(0x5, VT_R8, propVal);
}

double CStrip::GetAreaTop()
{
	double result;
	GetProperty(0x6, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetAreaTop(double propVal)
{
	SetProperty(0x6, VT_R8, propVal);
}

double CStrip::GetAreaLeft()
{
	double result;
	GetProperty(0x7, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetAreaLeft(double propVal)
{
	SetProperty(0x7, VT_R8, propVal);
}

double CStrip::GetAreaRight()
{
	double result;
	GetProperty(0x8, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetAreaRight(double propVal)
{
	SetProperty(0x8, VT_R8, propVal);
}

OLE_COLOR CStrip::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

CPicture CStrip::GetBackPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x9, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CStrip::SetBackPicture(LPDISPATCH propVal)
{
	SetProperty(0x9, VT_DISPATCH, propVal);
}

long CStrip::GetGrid()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetGrid(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long CStrip::GetMaxBufferSize()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetMaxBufferSize(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

short CStrip::GetVariables()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetVariables(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CStrip::GetVariableID()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetVariableID(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

unsigned long CStrip::GetVariableColor()
{
	unsigned long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetVariableColor(unsigned long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

CString CStrip::GetVariableName()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetVariableName(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

double CStrip::GetVariableLastX()
{
	double result;
	GetProperty(0x10, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetVariableLastX(double propVal)
{
	SetProperty(0x10, VT_R8, propVal);
}

double CStrip::GetVariableDeltaX()
{
	double result;
	GetProperty(0x11, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetVariableDeltaX(double propVal)
{
	SetProperty(0x11, VT_R8, propVal);
}

long CStrip::GetVariableLineStyle()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetVariableLineStyle(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CStrip::GetVariableSymbol()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetVariableSymbol(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

CString CStrip::GetVariableSymbolUserDefined()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetVariableSymbolUserDefined(LPCTSTR propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}

long CStrip::GetHandles()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetHandles(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

double CStrip::GetXSpan()
{
	double result;
	GetProperty(0x16, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetXSpan(double propVal)
{
	SetProperty(0x16, VT_R8, propVal);
}

short CStrip::GetVariableLineWidth()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetVariableLineWidth(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

double CStrip::GetLastX()
{
	double result;
	GetProperty(0x18, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetLastX(double propVal)
{
	SetProperty(0x18, VT_R8, propVal);
}

unsigned long CStrip::GetGridColor()
{
	unsigned long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetGridColor(unsigned long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

short CStrip::GetXMajorTics()
{
	short result;
	GetProperty(0x1a, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetXMajorTics(short propVal)
{
	SetProperty(0x1a, VT_I2, propVal);
}

short CStrip::GetXMinorTics()
{
	short result;
	GetProperty(0x1b, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetXMinorTics(short propVal)
{
	SetProperty(0x1b, VT_I2, propVal);
}

unsigned long CStrip::GetXTicColor()
{
	unsigned long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetXTicColor(unsigned long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

short CStrip::GetTracks()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTracks(short propVal)
{
	SetProperty(0x1d, VT_I2, propVal);
}

short CStrip::GetTrackID()
{
	short result;
	GetProperty(0x1e, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTrackID(short propVal)
{
	SetProperty(0x1e, VT_I2, propVal);
}

unsigned long CStrip::GetTrackBackColor()
{
	unsigned long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackBackColor(unsigned long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

double CStrip::GetTrackDisplayMin()
{
	double result;
	GetProperty(0x20, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackDisplayMin(double propVal)
{
	SetProperty(0x20, VT_R8, propVal);
}

double CStrip::GetTrackDisplayMax()
{
	double result;
	GetProperty(0x21, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackDisplayMax(double propVal)
{
	SetProperty(0x21, VT_R8, propVal);
}

unsigned long CStrip::GetTrackTicColor()
{
	unsigned long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackTicColor(unsigned long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

short CStrip::GetTrackMajorTics()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTrackMajorTics(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

short CStrip::GetTrackMinorTics()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTrackMinorTics(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

short CStrip::GetVariableTrackID()
{
	short result;
	GetProperty(0x25, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetVariableTrackID(short propVal)
{
	SetProperty(0x25, VT_I2, propVal);
}

short CStrip::GetTrackTicFontID()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTrackTicFontID(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}

unsigned long CStrip::GetStampColor()
{
	unsigned long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetStampColor(unsigned long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

short CStrip::GetStampFontID()
{
	short result;
	GetProperty(0x28, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetStampFontID(short propVal)
{
	SetProperty(0x28, VT_I2, propVal);
}

BOOL CStrip::GetTrackTicLabel()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetTrackTicLabel(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

BOOL CStrip::GetXTicLabel()
{
	BOOL result;
	GetProperty(0x2a, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetXTicLabel(BOOL propVal)
{
	SetProperty(0x2a, VT_BOOL, propVal);
}

short CStrip::GetXTicFontID()
{
	short result;
	GetProperty(0x2b, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetXTicFontID(short propVal)
{
	SetProperty(0x2b, VT_I2, propVal);
}

short CStrip::GetFonts()
{
	short result;
	GetProperty(0x2c, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetFonts(short propVal)
{
	SetProperty(0x2c, VT_I2, propVal);
}

short CStrip::GetFontID()
{
	short result;
	GetProperty(0x2d, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetFontID(short propVal)
{
	SetProperty(0x2d, VT_I2, propVal);
}

COleFont CStrip::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CStrip::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

CString CStrip::GetFontName()
{
	CString result;
	GetProperty(0x2e, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetFontName(LPCTSTR propVal)
{
	SetProperty(0x2e, VT_BSTR, propVal);
}

float CStrip::GetFontSize()
{
	float result;
	GetProperty(0x2f, VT_R4, (void*)&result);
	return result;
}

void CStrip::SetFontSize(float propVal)
{
	SetProperty(0x2f, VT_R4, propVal);
}

BOOL CStrip::GetFontBold()
{
	BOOL result;
	GetProperty(0x30, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetFontBold(BOOL propVal)
{
	SetProperty(0x30, VT_BOOL, propVal);
}

BOOL CStrip::GetFontItalic()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetFontItalic(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}

BOOL CStrip::GetFontStrikethru()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetFontStrikethru(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}

BOOL CStrip::GetFontUnderline()
{
	BOOL result;
	GetProperty(0x33, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetFontUnderline(BOOL propVal)
{
	SetProperty(0x33, VT_BOOL, propVal);
}

CPicture CStrip::GetTrackBackPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x34, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CStrip::SetTrackBackPicture(LPDISPATCH propVal)
{
	SetProperty(0x34, VT_DISPATCH, propVal);
}

double CStrip::GetTrackSeparation()
{
	double result;
	GetProperty(0x35, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackSeparation(double propVal)
{
	SetProperty(0x35, VT_R8, propVal);
}

BOOL CStrip::GetTrackOutline()
{
	BOOL result;
	GetProperty(0x36, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetTrackOutline(BOOL propVal)
{
	SetProperty(0x36, VT_BOOL, propVal);
}

unsigned long CStrip::GetTrackOutlineColor()
{
	unsigned long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackOutlineColor(unsigned long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

CString CStrip::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

unsigned long CStrip::GetCaptionColor()
{
	unsigned long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetCaptionColor(unsigned long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

short CStrip::GetCaptionFontID()
{
	short result;
	GetProperty(0x39, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetCaptionFontID(short propVal)
{
	SetProperty(0x39, VT_I2, propVal);
}

short CStrip::GetCaptionID()
{
	short result;
	GetProperty(0x3a, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetCaptionID(short propVal)
{
	SetProperty(0x3a, VT_I2, propVal);
}

short CStrip::GetCaptions()
{
	short result;
	GetProperty(0x3b, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetCaptions(short propVal)
{
	SetProperty(0x3b, VT_I2, propVal);
}

double CStrip::GetCaptionX()
{
	double result;
	GetProperty(0x3c, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetCaptionX(double propVal)
{
	SetProperty(0x3c, VT_R8, propVal);
}

double CStrip::GetCaptionY()
{
	double result;
	GetProperty(0x3d, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetCaptionY(double propVal)
{
	SetProperty(0x3d, VT_R8, propVal);
}

long CStrip::GetCaptionOrientation()
{
	long result;
	GetProperty(0x3e, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetCaptionOrientation(long propVal)
{
	SetProperty(0x3e, VT_I4, propVal);
}

BOOL CStrip::GetPause()
{
	BOOL result;
	GetProperty(0x3f, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetPause(BOOL propVal)
{
	SetProperty(0x3f, VT_BOOL, propVal);
}

double CStrip::GetTrackMax()
{
	double result;
	GetProperty(0x40, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackMax(double propVal)
{
	SetProperty(0x40, VT_R8, propVal);
}

double CStrip::GetTrackMin()
{
	double result;
	GetProperty(0x41, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackMin(double propVal)
{
	SetProperty(0x41, VT_R8, propVal);
}

BOOL CStrip::GetOutline()
{
	BOOL result;
	GetProperty(0x42, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetOutline(BOOL propVal)
{
	SetProperty(0x42, VT_BOOL, propVal);
}

long CStrip::GetOutlineAlign()
{
	long result;
	GetProperty(0x43, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetOutlineAlign(long propVal)
{
	SetProperty(0x43, VT_I4, propVal);
}

unsigned long CStrip::GetOutlineColor()
{
	unsigned long result;
	GetProperty(0x44, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetOutlineColor(unsigned long propVal)
{
	SetProperty(0x44, VT_I4, propVal);
}

CString CStrip::GetOutlineTitle()
{
	CString result;
	GetProperty(0x45, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetOutlineTitle(LPCTSTR propVal)
{
	SetProperty(0x45, VT_BSTR, propVal);
}

short CStrip::GetOutlineWidth()
{
	short result;
	GetProperty(0x46, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetOutlineWidth(short propVal)
{
	SetProperty(0x46, VT_I2, propVal);
}

long CStrip::GetDisplayMode()
{
	long result;
	GetProperty(0x47, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetDisplayMode(long propVal)
{
	SetProperty(0x47, VT_I4, propVal);
}

double CStrip::GetVariableSymbolSize()
{
	double result;
	GetProperty(0x48, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetVariableSymbolSize(double propVal)
{
	SetProperty(0x48, VT_R8, propVal);
}

short CStrip::GetWrapCursorWidth()
{
	short result;
	GetProperty(0x49, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetWrapCursorWidth(short propVal)
{
	SetProperty(0x49, VT_I2, propVal);
}

unsigned long CStrip::GetWrapCursorColor()
{
	unsigned long result;
	GetProperty(0x4a, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetWrapCursorColor(unsigned long propVal)
{
	SetProperty(0x4a, VT_I4, propVal);
}

long CStrip::GetStampSymbol()
{
	long result;
	GetProperty(0x4b, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetStampSymbol(long propVal)
{
	SetProperty(0x4b, VT_I4, propVal);
}

long CStrip::GetStampMode()
{
	long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetStampMode(long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

short CStrip::GetStampTrack()
{
	short result;
	GetProperty(0x4d, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetStampTrack(short propVal)
{
	SetProperty(0x4d, VT_I2, propVal);
}

double CStrip::GetStampSymbolSize()
{
	double result;
	GetProperty(0x4e, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetStampSymbolSize(double propVal)
{
	SetProperty(0x4e, VT_R8, propVal);
}

CString CStrip::GetStampSymbolUserDefined()
{
	CString result;
	GetProperty(0x4f, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetStampSymbolUserDefined(LPCTSTR propVal)
{
	SetProperty(0x4f, VT_BSTR, propVal);
}

short CStrip::GetXTicLabelOffset()
{
	short result;
	GetProperty(0x50, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetXTicLabelOffset(short propVal)
{
	SetProperty(0x50, VT_I2, propVal);
}

short CStrip::GetTrackTicLabelOffset()
{
	short result;
	GetProperty(0x51, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTrackTicLabelOffset(short propVal)
{
	SetProperty(0x51, VT_I2, propVal);
}

BOOL CStrip::GetSingleBuffer()
{
	BOOL result;
	GetProperty(0x52, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetSingleBuffer(BOOL propVal)
{
	SetProperty(0x52, VT_BOOL, propVal);
}

BOOL CStrip::GetFocusOutline()
{
	BOOL result;
	GetProperty(0x53, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetFocusOutline(BOOL propVal)
{
	SetProperty(0x53, VT_BOOL, propVal);
}

BOOL CStrip::GetVariableVisible()
{
	BOOL result;
	GetProperty(0x54, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetVariableVisible(BOOL propVal)
{
	SetProperty(0x54, VT_BOOL, propVal);
}

long CStrip::GetCursorMode()
{
	long result;
	GetProperty(0x55, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetCursorMode(long propVal)
{
	SetProperty(0x55, VT_I4, propVal);
}

double CStrip::GetCursorX()
{
	double result;
	GetProperty(0x56, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetCursorX(double propVal)
{
	SetProperty(0x56, VT_R8, propVal);
}

long CStrip::GetVariableType()
{
	long result;
	GetProperty(0x57, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetVariableType(long propVal)
{
	SetProperty(0x57, VT_I4, propVal);
}

long CStrip::GetXTicMode()
{
	long result;
	GetProperty(0x58, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetXTicMode(long propVal)
{
	SetProperty(0x58, VT_I4, propVal);
}

CString CStrip::GetTimeSecondsFormat()
{
	CString result;
	GetProperty(0x59, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetTimeSecondsFormat(LPCTSTR propVal)
{
	SetProperty(0x59, VT_BSTR, propVal);
}

CString CStrip::GetTimeMinutesFormat()
{
	CString result;
	GetProperty(0x5a, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetTimeMinutesFormat(LPCTSTR propVal)
{
	SetProperty(0x5a, VT_BSTR, propVal);
}

CString CStrip::GetTimeHoursFormat()
{
	CString result;
	GetProperty(0x5b, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetTimeHoursFormat(LPCTSTR propVal)
{
	SetProperty(0x5b, VT_BSTR, propVal);
}

CString CStrip::GetTimeDaysFormat()
{
	CString result;
	GetProperty(0x5c, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetTimeDaysFormat(LPCTSTR propVal)
{
	SetProperty(0x5c, VT_BSTR, propVal);
}

CString CStrip::GetTimeYearsFormat()
{
	CString result;
	GetProperty(0x5d, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetTimeYearsFormat(LPCTSTR propVal)
{
	SetProperty(0x5d, VT_BSTR, propVal);
}

CString CStrip::GetTimeDateFormat()
{
	CString result;
	GetProperty(0x5e, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetTimeDateFormat(LPCTSTR propVal)
{
	SetProperty(0x5e, VT_BSTR, propVal);
}

CString CStrip::GetTimeMonthsFormat()
{
	CString result;
	GetProperty(0x5f, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetTimeMonthsFormat(LPCTSTR propVal)
{
	SetProperty(0x5f, VT_BSTR, propVal);
}

BOOL CStrip::GetEnablePanning()
{
	BOOL result;
	GetProperty(0x60, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetEnablePanning(BOOL propVal)
{
	SetProperty(0x60, VT_BOOL, propVal);
}

BOOL CStrip::GetEnableTrackSizing()
{
	BOOL result;
	GetProperty(0x61, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetEnableTrackSizing(BOOL propVal)
{
	SetProperty(0x61, VT_BOOL, propVal);
}

double CStrip::GetTrackStart()
{
	double result;
	GetProperty(0x62, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackStart(double propVal)
{
	SetProperty(0x62, VT_R8, propVal);
}

double CStrip::GetTrackStop()
{
	double result;
	GetProperty(0x63, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackStop(double propVal)
{
	SetProperty(0x63, VT_R8, propVal);
}

BOOL CStrip::GetAutoRedraw()
{
	BOOL result;
	GetProperty(0x64, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetAutoRedraw(BOOL propVal)
{
	SetProperty(0x64, VT_BOOL, propVal);
}

double CStrip::GetXDisplayMax()
{
	double result;
	GetProperty(0x65, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetXDisplayMax(double propVal)
{
	SetProperty(0x65, VT_R8, propVal);
}

double CStrip::GetXDisplayMin()
{
	double result;
	GetProperty(0x66, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetXDisplayMin(double propVal)
{
	SetProperty(0x66, VT_R8, propVal);
}

OLE_HANDLE CStrip::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

unsigned long CStrip::GetCursorColor()
{
	unsigned long result;
	GetProperty(0x67, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetCursorColor(unsigned long propVal)
{
	SetProperty(0x67, VT_I4, propVal);
}

long CStrip::GetCaptionAlign()
{
	long result;
	GetProperty(0x68, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetCaptionAlign(long propVal)
{
	SetProperty(0x68, VT_I4, propVal);
}

long CStrip::GetOrientation()
{
	long result;
	GetProperty(0x69, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetOrientation(long propVal)
{
	SetProperty(0x69, VT_I4, propVal);
}

long CStrip::GetXTicLabelAlign()
{
	long result;
	GetProperty(0x6a, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetXTicLabelAlign(long propVal)
{
	SetProperty(0x6a, VT_I4, propVal);
}

long CStrip::GetXTicLabelOrientation()
{
	long result;
	GetProperty(0x6b, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetXTicLabelOrientation(long propVal)
{
	SetProperty(0x6b, VT_I4, propVal);
}

long CStrip::GetTrackXTics()
{
	long result;
	GetProperty(0x6c, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackXTics(long propVal)
{
	SetProperty(0x6c, VT_I4, propVal);
}

long CStrip::GetTrackTicLabelAlign()
{
	long result;
	GetProperty(0x6d, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackTicLabelAlign(long propVal)
{
	SetProperty(0x6d, VT_I4, propVal);
}

long CStrip::GetTrackTicLabelOrientation()
{
	long result;
	GetProperty(0x6e, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackTicLabelOrientation(long propVal)
{
	SetProperty(0x6e, VT_I4, propVal);
}

BOOL CStrip::GetVariableFill()
{
	BOOL result;
	GetProperty(0x6f, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetVariableFill(BOOL propVal)
{
	SetProperty(0x6f, VT_BOOL, propVal);
}

BOOL CStrip::GetTrackInvert()
{
	BOOL result;
	GetProperty(0x70, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetTrackInvert(BOOL propVal)
{
	SetProperty(0x70, VT_BOOL, propVal);
}

long CStrip::GetTrackYTics()
{
	long result;
	GetProperty(0x71, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackYTics(long propVal)
{
	SetProperty(0x71, VT_I4, propVal);
}

short CStrip::GetCursorTrackID()
{
	short result;
	GetProperty(0x72, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetCursorTrackID(short propVal)
{
	SetProperty(0x72, VT_I2, propVal);
}

double CStrip::GetCursorY()
{
	double result;
	GetProperty(0x73, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetCursorY(double propVal)
{
	SetProperty(0x73, VT_R8, propVal);
}

CString CStrip::GetConfiguration()
{
	CString result;
	GetProperty(0x74, VT_BSTR, (void*)&result);
	return result;
}

void CStrip::SetConfiguration(LPCTSTR propVal)
{
	SetProperty(0x74, VT_BSTR, propVal);
}

double CStrip::GetY()
{
	double result;
	GetProperty(0x75, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetY(double propVal)
{
	SetProperty(0x75, VT_R8, propVal);
}

double CStrip::Get_y()
{
	double result;
	GetProperty(0x0, VT_R8, (void*)&result);
	return result;
}

void CStrip::Set_y(double propVal)
{
	SetProperty(0x0, VT_R8, propVal);
}

long CStrip::GetStampOrientation()
{
	long result;
	GetProperty(0x76, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetStampOrientation(long propVal)
{
	SetProperty(0x76, VT_I4, propVal);
}

short CStrip::GetTrackBands()
{
	short result;
	GetProperty(0x77, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTrackBands(short propVal)
{
	SetProperty(0x77, VT_I2, propVal);
}

short CStrip::GetTrackBandID()
{
	short result;
	GetProperty(0x78, VT_I2, (void*)&result);
	return result;
}

void CStrip::SetTrackBandID(short propVal)
{
	SetProperty(0x78, VT_I2, propVal);
}

unsigned long CStrip::GetTrackBandColor()
{
	unsigned long result;
	GetProperty(0x79, VT_I4, (void*)&result);
	return result;
}

void CStrip::SetTrackBandColor(unsigned long propVal)
{
	SetProperty(0x79, VT_I4, propVal);
}

double CStrip::GetTrackBandStart()
{
	double result;
	GetProperty(0x7a, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackBandStart(double propVal)
{
	SetProperty(0x7a, VT_R8, propVal);
}

double CStrip::GetTrackBandStop()
{
	double result;
	GetProperty(0x7b, VT_R8, (void*)&result);
	return result;
}

void CStrip::SetTrackBandStop(double propVal)
{
	SetProperty(0x7b, VT_R8, propVal);
}

CPicture CStrip::GetTrackBandPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7c, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CStrip::SetTrackBandPicture(LPDISPATCH propVal)
{
	SetProperty(0x7c, VT_DISPATCH, propVal);
}

BOOL CStrip::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CStrip::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CStrip operations

void CStrip::AddXY(short Index, double X, double Y)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8 VTS_R8;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, X, Y);
}

void CStrip::AddY(short Index, double Y)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Y);
}

void CStrip::ClearAll()
{
	InvokeHelper(0x7f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CStrip::AddYArray(short Index, VARIANT* Array)
{
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT;
	InvokeHelper(0x80, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Array);
}

void CStrip::AddXYArray(short Index, VARIANT* Array)
{
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT;
	InvokeHelper(0x81, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Array);
}

void CStrip::ClearVariable(short VariableID)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x82, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 VariableID);
}

void CStrip::ClearTrack(short TrackID)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x83, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 TrackID);
}

void CStrip::ClearStamps()
{
	InvokeHelper(0x84, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CStrip::AddStamp(double Y, LPCTSTR Text)
{
	static BYTE parms[] =
		VTS_R8 VTS_BSTR;
	InvokeHelper(0x85, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Y, Text);
}

void CStrip::AddSymbol(double Y)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x86, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Y);
}

void CStrip::ShowPropertyPage()
{
	InvokeHelper(0x87, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

double CStrip::GetCursorValue(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x90, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetCursorValue(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x90, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

double CStrip::GetVariableVisibleMax(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x91, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableVisibleMax(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x91, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

double CStrip::GetVariableVisibleMin(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableVisibleMin(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x92, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

double CStrip::GetVariableVisibleAvg(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x93, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableVisibleAvg(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x93, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

double CStrip::GetVariableMax(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableMax(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x94, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

double CStrip::GetVariableMin(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableMin(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x95, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

double CStrip::GetVariableAvg(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableAvg(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x96, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

void CStrip::Redraw()
{
	InvokeHelper(0x88, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CStrip::RedrawStatic()
{
	InvokeHelper(0x89, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CStrip::AddStampXY(double X, double Y, LPCTSTR Text)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_BSTR;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X, Y, Text);
}

void CStrip::AddSymbolXY(double X, double Y)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x8b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X, Y);
}

void CStrip::PrintArea(long hDC, double OffsetX, double OffsetY, double Width, double Height)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x8c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC, OffsetX, OffsetY, Width, Height);
}

void CStrip::ClearBefore(double X)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X);
}

void CStrip::ClearAfter(double X)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X);
}

void CStrip::SetDisplay(double DisplayMax, double DisplayMin)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x8f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 DisplayMax, DisplayMin);
}

double CStrip::GetVariableVisibleStdDev(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x97, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableVisibleStdDev(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x97, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

double CStrip::GetVariableStdDev(short VariableID)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x98, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VariableID);
	return result;
}

void CStrip::SetVariableStdDev(short VariableID, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x98, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VariableID, newValue);
}

void CStrip::AddXYNoSort(short Index, double X, double Y)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8 VTS_R8;
	InvokeHelper(0xc7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, X, Y);
}

void CStrip::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CStrip::SetConfigurationEx(LPCTSTR ConfigName, LPCTSTR ConfigFile)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ConfigName, ConfigFile);
}

void CStrip::SetStampBufferMax(long bufferSize)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bufferSize);
}

void CStrip::AddYArrayV(short Index, const VARIANT& Array)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, &Array);
}

void CStrip::AddXYArrayV(short Index, const VARIANT& Array)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, &Array);
}
